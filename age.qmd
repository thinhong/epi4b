# Age distribution

::: {.callout-note appearance="simple"}
Click here to download the practice data:

{{< downloadthis data/linelist_cleaned.rds dname="linelist_cleaned" label="linelist_cleaned.rds" type=light >}}
:::

Load all essential packages and data.

```{r, warning=FALSE, message=FALSE}
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggsci)

df <- readRDS("data/linelist_cleaned.rds")
```

A common question 

## Semi-log plot

A semi-log plot has a linear scale on the x-axis and a logarithmic scale on the y-axis.

```{r}
# Set the age groups
age_cut <- c(0, 20, 40, 60, Inf)

df_plot <- df |> 
  filter(!is.na(age)) |> 
  #  the age groups
  mutate(age_group = cut(age, breaks = age_cut, right = F)) |> 
  # Count the daily number of infections in each age group
  group_by(date_onset) |> 
  count(age_group) |> 
  # Ensure that we have all age groups per day
  as.data.frame() |> 
  complete(date_onset, age_group, fill = list(n = 0)) |> 
  # Now compute the cumulative case for each age group
  # First, take each group table
  group_by(age_group) |> 
  # Sort by ascending date
  arrange(date_onset) |>
  # Cumulative case count
  mutate(cum_n = cumsum(n))
```

```{r}
#| warning: false
#| fig-width: 4
#| fig-height: 2.5

ggplot(df_plot, aes(x = date_onset, y = log(cum_n, 10), color = age_group)) +
  geom_line() +
  scale_color_lancet() +
  scale_y_continuous(expand = c(0, 0)) +
  labs(x = "Date of onset", y = "Log cumulative case count", color = "Age group") +
  theme_classic()
```



## Time series stacked bar

We want to see if the age distribution changes during the epidemic. The age categories are in `age_cat`, and we will look at how they change weekly. First, we will group the onset days into weeks using `floor_date()` from the `lubridate` package.

```{r}
df$week_onset <- floor_date(df$date_onset, "week")
```

Compute the weekly percentage for each group. 

```{r}
df_plot <- df |> 
  filter(!is.na(week_onset), !is.na(age_cat)) |> 
  count(week_onset, age_cat) |> 
  group_by(week_onset) |> 
  mutate(prop = n / sum(n)) |> 
  data.frame()

# Use complete() to fill missing groups with 0
df_plot <- df_plot |> 
  complete(week_onset, age_cat, fill = list(n = 0, prop = 0))
```

Plot it with `geom_bar()`.

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: "100%"
ggplot(df_plot, aes(x = week_onset, y = prop, fill = age_cat)) +
  geom_bar(stat = "identity") +
  scale_fill_jco() +
  theme_minimal()
```

You might want to reverse the order so that ages 0-4 are at the bottom and 70+ at the top. Do this by setting the `position` argument. Also, reverse the legend to match the new plot order.

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: "100%"
ggplot(df_plot, aes(x = week_onset, y = prop, fill = age_cat)) +
  geom_bar(stat = "identity", position = position_stack(reverse = TRUE)) +
  guides(fill = guide_legend(reverse = TRUE)) +
  scale_fill_jco() +
  theme_minimal()
```

